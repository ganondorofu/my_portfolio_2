'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { generateLearningStatement } from '@/ai/flows/generate-learning-statement';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { useToast } from '@/hooks/use-toast';
import { Loader2 } from 'lucide-react';

const formSchema = z.object({
  skills: z.string().min(10, 'Please list some of your skills.'),
  projects: z.string().min(10, 'Please describe a few projects.'),
});

const defaultSkills = "React, TypeScript, Node.js, API設計, Docker, nginx, Proxmox, CI/CD, 3Dモデリング";
const defaultProjects = "ClassConnect (時間割管理ツール), CanSat (飛行ログシステム), 自宅サーバー構築";

export default function LearningStatement() {
  const [statement, setStatement] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      skills: defaultSkills,
      projects: defaultProjects,
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setStatement('');
    try {
      const result = await generateLearningStatement(values);
      setStatement(result.statement);
    } catch (error) {
      console.error(error);
      toast({
        title: 'Error Generating Statement',
        description: 'An unexpected error occurred. Please try again later.',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-primary">Learning Statement Generator</h2>
      <p className="text-muted-foreground">
        あなたのスキルとプロジェクトに基づいて、AIがパーソナライズされた学習方針のステートメントを生成します。
      </p>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          <FormField
            control={form.control}
            name="skills"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Skills</FormLabel>
                <FormControl>
                  <Textarea placeholder="List your skills, separated by commas..." rows={4} {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="projects"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Projects</FormLabel>
                <FormControl>
                  <Textarea placeholder="Describe your projects briefly..." rows={4} {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <Button type="submit" disabled={isLoading}>
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            Generate Statement
          </Button>
        </form>
      </Form>

      {(isLoading || statement) && (
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>Generated Statement</CardTitle>
            <CardDescription>This statement was generated by AI based on your input.</CardDescription>
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <div className="space-y-2">
                <div className="h-4 w-full animate-pulse rounded-md bg-muted"></div>
                <div className="h-4 w-full animate-pulse rounded-md bg-muted"></div>
                <div className="h-4 w-3/4 animate-pulse rounded-md bg-muted"></div>
              </div>
            ) : (
              <p className="whitespace-pre-wrap">{statement}</p>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
}
